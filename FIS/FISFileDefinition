COPYRIGHT AFFONSO AMENDOLA 2019
Distributed under GPLv3

Created by Affonso Amendola with help from Francisco Viana

OKAY, so I needed a file format to store vga images, instead of using a standard file format of the era like PCX or shit like that I decided to make my own, tailor made for the
way I write code, so here is the description of .FIS files, FIS stands for Fofonso's Image Storage.

Also, use RLE to compress data without losing any information.


FILE DESCRIPTION:
--------------------------------------------

HEADER:
WORD MAGIC_NUMBER 
BYTE TYPE_OF_ADAPTER 
WORD SIZEX
WORD SIZEY 
BYTE LAST_INDEX_USED 
BYTE SEQUENCE_INDICATOR 
BYTE UNUSED[23]

Magic number should always be 0xF0F0 for this kind of file.

Type of adapter is an 8bit integer representing the type of video adapter that this file is tailored to,
so far the only possible value is 0 representing the VGA (no s), but I may make it compatible with EGA/CGA or older more interesting standards.

The sequence indicator value is used to decompress the image, it is the highest valued least used index 
---------------------------------------------------
DATA:
Pixel data is stored as bytes and a RLE algorithm is applied to compress data.

If the SEQUENCE_INDICATOR is read, it means that the following 2 bytes contains an index and a number of times that index is to be repeated.

NOTE1: The sequence is only considered so if it has length 3 or more, so AA AA is stored as AA AA, but AA AA AA is stored as FF AA 03 if the SEQUENCE_INDICATOR is FFh


So, the image 0A 0A 0A 0A 0A 0A 02 02 02 02 is stored as FF 0A 06 FF 02 04 slightly compressing the data, I dont really know how efficient this method is, 
but in doing some research it shows that it can help a lot with images with big sequences of the same character, and I believe it's always worth it IF there are less than 256 colors

NOTE2: If the image has all 256 indexes being used, the index color with the same value of the SEQUENCE_INDICATOR ignores NOTE1 and is stored as a sequence of length 1 if it appears
only once somewhere in the image, so supposing AA is the sequence indicator of the image ... 02 02 02 02 AA 03 01 02 ... is stored as ... AA 02 04 AA 01 AA 03 01 02 ..., this is the main
problem with this compression algorithm, it isn't really suited for 256 color images that actually USE all 256 colors available to them, but it is compatible with them, 

----------------------------------------------------
PALETTE:
After the data at position (EOF-(LAST_INDEX_USED+1)*3)Bytes

The color information is stored sequentially as 3 bytes, representing the Red, Green and Blue values as 8bit truecolor for each color index.




